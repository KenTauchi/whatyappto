// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())
    email String @unique
    username String? @unique
    name String?
    bio String?
    image String?
    location String?
    website String?
    clerkId String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    posts Post[] // One to many relationship 
    likes Like[] // One to many relationship 
    comments Comment[] // One to many relationship 
    // saved Saved[] // One to many relationship 

    following Follows[] @relation("Following") //users that the user is following
    followers Follows[] @relation("Followers") //users that follow the user

    notifications Notification[] @relation("userNotifications") //notifications that the user has received
    notificationsCreated Notification[] @relation("notificationCreator") //notifications that the user has created
}

model Post {
    id String @id @default(uuid())
    authorId String
    content String
    image String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // Cascade means that if the user is deleted, all their posts will be deleted
    likes Like[] // One to many relationship 
    comments Comment[] // One to many relationship 
    // saved Saved[] // One to many relationship 
    notifications Notification[] 
    
}

model Comment {
    id String @id @default(uuid())
    content String
    authorId String
    postId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    notifications Notification[]
    
    @@index([authorId, postId]) // This is a performance optimization for the database (it will create a composite index on the authorId and postId fields)
}

model Like {
    id String @id @default(uuid())
    userId String 
    postId String
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([userId, postId]) // This is a performance optimization for the database (it will create a composite index on the userId and postId fields)
    @@unique([userId, postId]) // This is to prevent duplicate likes on the same post by the same user
}

model Follows {
    followerId String
    followingId String
    createdAt DateTime @default(now())

    // Relations
    follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

    @@index([followerId, followingId]) 
    @@id([followerId, followingId]) //This creates a unique id of Follows model combining the followerId and followingId (no need to create a separate id for the Follows model)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}